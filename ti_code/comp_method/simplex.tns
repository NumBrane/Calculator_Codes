Define LibPub simplex(c,a,b)=
Prgm
:Local b_vec,opt_val,temp,current_factor,m,n,tbl,basic,nonbasic,iter,max_iter,tol,phase,opt,ratio,pivot_row,pivot_col,i,j,current_factor
:dim(a)[1]→m
:dim(a)[2]→n
:
:newMat(m,1)→b_vec
:
:For i,1,m
:  b[1,i]→b_vec[i,1]
:EndFor
:
:newMat(m+1,n+m+1)→tbl
:
:For i,1,m
:  For j,1,n
:    a[i,j]→tbl[i,j]
:  EndFor
:  tbl[i,n+i]:=1
:  b_vec[i,1]→tbl[i,n+m+1]
:EndFor
:newMat(n,1)→temp
:For j,1,n
:  c[1,j]→temp[j,1]
:  −temp[j,1]→tbl[m+1,j]
:EndFor
:seq(n+i,i,1,m)→basic
:seq(j,j,1,n)→nonbasic
:100→max_iter
:1.−6→tol
:For iter,1,max_iter
:  0→opt
:  −1→pivot_col
:  For j,1,n+m
:    If tbl[m+1,j]<opt-tol Then
:      tbl[m+1,j]→opt
:      j→pivot_col
:    EndIf
:  EndFor
:  If pivot_col=−1 Then
:    Exit
:  EndIf
:  10^(300)→ratio
:  −1→pivot_row
:  For i,1,m
:    If tbl[i,pivot_col]>tol Then
:((tbl[i,n+m+1])/(tbl[i,pivot_col]))→ratio_test
:      If ratio_test<ratio Then
:        ratio_test→ratio
:        i→pivot_row
:      EndIf
:    EndIf
:  EndFor
:  If pivot_row=−1 Then
:    Disp "problem is unbounded"
:    Return {"unbounded",newMat(n,1)}
:  EndIf
:  basic[pivot_row]→leaving_var
:  pivot_col→entering_var
:  pivot_col→basic[pivot_row]
:  If leaving_var≤n Then
:    leaving_var→nonbasic[leaving_var]
:  EndIf
:
:  tbl[pivot_row,pivot_col]→pivot_val
:  For j,1,n+m+1
:((tbl[pivot_row,j])/(pivot_val))→tbl[pivot_row,j]
:  EndFor
:  For i,1,m+1
:    If i≠pivot_row Then
:      tbl[i,pivot_col]→current_factor
:      For j,1,n+m+1
:      tbl[i,j]-current_factor*tbl[pivot_row,j]→tbl[i,j]
:      EndFor
:    EndIf
:  EndFor
:EndFor
:newMat(n,1)→x
:For i,1,m
:  If basic[i]≤n Then
:    tbl[i,n+m+1]→x[basic[i],1]
:  EndIf
:EndFor
:tbl[m+1,n+m+1]→opt_val
:Disp "optimal value:",opt_val
:Disp "solution:",x
:EndPrgm